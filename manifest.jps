type: install
version: 1.5
id: kubernetes
baseUrl: https://raw.githubusercontent.com/jelastic-jps/kubernetes/k8s-mmaster
description:
  text: /text/description-kube.md
  short: Kubernetes Multi-Master HA Cluster
categories:
  - apps/clusters
  - apps/dev-and-admin-tools

logo: /images/k8s-logo.png
name: Kubernetes Multi-Master Cluster
targetRegions:
  type: vz7

onBeforeInit: |
  var resp = jelastic.billing.account.GetQuotas(appid, session, 'environment.jelasticssl.enabled');
  if (resp.result != 0 ) return resp;  
  return  { result: 0, ssl: !!resp.array[0].value };

settings:
  fields:
  - type: spinner
    name: k8sm
    caption: Master
    min: 3
    max: 6
    default: 3

  - type: spinner
    name: mbl
    caption: Balancer
    min: 1
    max: 4
    default: 1

  - type: spinner
    name: worker
    caption: Worker
    min: 3
    max: 10
    default: 3

  - type: checkbox
    name: storage
    caption: Attach Storage Node and Activate Dynamic Volume Provisioning on Kubernetes Cluster
    value: true

  - name: deploy
    type: radio-fieldset
    values:
      cc: Clean Cluster
      cmd: Deploy Helm Chart
      yml: Deploy Stack YML
    default: cc
    showIf:
      cmd:
        name: cmd
        type: text
        height: 100
        caption: Command
        required: true
        default: |-
          helm repo add ibm-charts https://raw.githubusercontent.com/IBM/charts/master/repo/stable/
          helm install --name default --set autoscaling.enabled=true --set autoscaling.minReplicas=2 ibm-charts/ibm-open-liberty --debug
          kubectl apply -f ${baseUrl}/addons/openliberty.yaml

      yml:
        name: yml
        type: string
        caption: Stack YML URL
        default: ${baseUrl}/addons/nginx-example.yaml
        required: true
        vtype: url

ssl: true
nodes:
- count: ${settings.mbl}
  cloudlets: 8
  nodeType: haproxy
  nodeGroup: mbl
  displayName: Master Balancer
  extip: false
  env:
    JELASTIC_PORTS: '6443'

- count: ${settings.k8sm}
  cloudlets: 32
  image: jelastic/kubernetes:latest
  nodeGroup: k8sm
  displayName: Master
  extip: false
  env:
    JELASTIC_EXPOSE: false
  volumes:
  - /var/lib/connect
  volumeMounts:
    /var/lib/connect:
      readOnly: true
      sourcePath: /var/lib/connect
      sourceNodeGroup: k8sm

- count: ${settings.worker}
  nodeGroup: cp
  image: jelastic/kubernetes:latest
  displayName: Workers
  cloudlets: 32
  extip: false
  env:
    JELASTIC_EXPOSE: false
  volumes:
  - /var/lib/connect
  volumeMounts:
    /var/lib/connect:
      readOnly: true
      sourcePath: /var/lib/connect
      sourceNodeGroup: k8sm

skipNodeEmails: true

onInstall:
  - init-masters:
      id: ${nodes.k8sm.master.id}
      ip: ${nodes.k8sm.master.intIP}
      master: true
  - forEach(node:nodes.k8sm):
      if (!${@node.ismaster}):
        init-masters:
          id: ${@node.id}
          ip: ${@node.intIP}
          master: false

  - connect-workers
  - setup-overlay
  - install-components
  - install-helm
  - install-traefik
  - manage-ingress-routes
  - generate-admin-token
  - install-storage
  - deploy

onAfterScaleOut[k8sm]:
  forEach(event.response.nodes): init-masters

onAfterScaleOut[cp]:
  forEach(event.response.nodes): connect-workers

actions:
  init-masters:
    - cmd[${this.id}]: |-
        systemctl daemon-reload > /dev/null 2>&1

    - if (${this.master}):
        - cmd [mbl]: |-
            sed -i '/^<\/mappings>.*/i \\t<pair frontend_port="6443" backend_port="6443" description="CPlane balancing" option="tcp-check" params="check fall 3 rise 2">' /etc/haproxy/tcpmaps/mappings.xml
            echo '${this.ip}' > /etc/haproxy/hosts
            jem balancer rebuildCommon
          user: root
        - cmd [${this.id}]: |-
            sed -i 's/^controlPlaneEndpoint:.*/controlPlaneEndpoint: "mbl.${env.domain}:6443"/g' /etc/kubernetes/custom-kubeadm.yaml
            kubeadm init --config /etc/kubernetes/custom-kubeadm.yaml --experimental-upload-certs --ignore-preflight-errors=swap | tee /var/log/kubeadm-init.log
            sed -n '/kubeadm join/,/^$/{/./p}' /var/log/kubeadm-init.log | sed ':a;N;$!ba;s/\\\n//g' | grep 'experimental-control-plane' > /var/lib/connect/settings-master
            sed -n '/kubeadm join/,/^$/{/./p}' /var/log/kubeadm-init.log | sed ':a;N;$!ba;s/\\\n//g' | grep -v 'experimental-control-plane' > /var/lib/connect/settings
    - if (!${this.master}):
        - cmd [${this.id}]: |-
            $(cat /var/lib/connect/settings-master) --ignore-preflight-errors=swap > /dev/null 2>&1
        - cmd [mbl]: |-
            echo '${this.ip}' >> /etc/haproxy/hosts
            jem balancer rebuildCommon
          user: root

    - cmd[${this.id}]: |-
        mkdir -p $HOME/.kube
        cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
        chown root:root $HOME/.kube/config
        iptables -I INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
        service iptables save
        systemctl enable kubelet.service

  manage-ingress-routes:
    cmd[${nodes.k8sm.master.id}]: |-
      wget ${baseUrl}/addons/dashboard-ingress.yaml -O /tmp/dashboard-ingress.yaml
      sed -i 's/$DOMAIN/${env.domain}/g' /tmp/dashboard-ingress.yaml
      kubectl apply -f /tmp/dashboard-ingress.yaml

  connect-workers:
    cmd[cp]: |-
      systemctl daemon-reload > /dev/null 2>&1
      $(cat /var/lib/connect/settings) --ignore-preflight-errors=swap > /dev/null 2>&1
      sleep 5
      iptables -I INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
      service iptables save
      systemctl enable kubelet.service

  setup-overlay:
    cmd[${nodes.k8sm.master.id}]: |-
      kubectl apply -f ${baseUrl}/addons/weave-pack.yaml 
      wget https://github.com/weaveworks/weave/releases/download/v2.4.0/weave -O /usr/bin/weave
      chmod +x /usr/bin/weave

  install-components:
    - cmd[${nodes.k8sm.master.id}]: |-
        kubectl create -f ${baseUrl}/addons/metrics-server/aggregated-metrics-reader.yaml
        kubectl create -f ${baseUrl}/addons/metrics-server/auth-delegator.yaml
        kubectl create -f ${baseUrl}/addons/metrics-server/auth-reader.yaml
        kubectl create -f ${baseUrl}/addons/metrics-server/metrics-apiservice.yaml
        kubectl create -f ${baseUrl}/addons/metrics-server/metrics-server-deployment.yaml
        kubectl create -f ${baseUrl}/addons/metrics-server/metrics-server-service.yaml
        kubectl create -f ${baseUrl}/addons/metrics-server/resource-reader.yaml
        kubectl apply -f ${baseUrl}/addons/kubernetes-dashboard.yaml
        kubectl create -f ${baseUrl}/addons/create-admin.yaml
        kubectl apply -f ${baseUrl}/addons/grant-privileges.yaml

  install-helm:
    cmd[${nodes.k8sm.master.id}]: |-
      curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash > /dev/null 2>&1
      helm init
      helm update
      kubectl create serviceaccount --namespace kube-system tiller
      kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
      kubectl patch deploy --namespace kube-system tiller-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}'

  install-traefik:
     cmd[${nodes.k8sm.master.id}]: |-
      kubectl apply -f ${baseUrl}/addons/traefik-rbac.yaml
      kubectl apply -f ${baseUrl}/addons/traefik-ds.yaml
      kubectl apply -f ${baseUrl}/addons/traefik-ui.yaml
      openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=traefik-ui.jelastic"
      kubectl -n kube-system create secret tls traefik-ui-tls-cert --key=tls.key --cert=tls.crt

  generate-admin-token:
    - cmd[${nodes.k8sm.master.id}]: kubectl describe svc kubernetes-dashboard -n kube-system  | grep "NodePort:" | grep -o -E "[0-9]*"
    - setGlobals:
        port: ${response.out}
    - cmd[${nodes.k8sm.master.id}]: kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep fulladmin | awk '{print $1}')  | grep 'token:' | sed -e's/token:\| //g'
    - setGlobals:
        token: ${response.out}

  deploy:
    - if ('${settings.deploy}' == 'cc'):
        cmd[${nodes.k8sm.master.id}]: |-
          kubectl apply -f ${baseUrl}/addons/helloworld.yaml
    - if ('${settings.deploy}' == 'cmd'):
        cmd[${nodes.k8sm.master.id}]: ${settings.cmd}
    - if ('${settings.deploy}' == 'yml'):
        cmd[${nodes.k8sm.master.id}]: kubectl apply -f ${settings.yml}

  install-storage:
    if ('${settings.storage}' == 'true'):
      install: /addons/storage.jps?_r=${fn.random}

success: |
   Access Token to [Kubernetes UI](https://${env.domain}/kubernetes-dashboard/):

   ```${globals.token}```
