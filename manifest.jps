---
type: install
version: 1.5
id: kubernetes
baseUrl: https://raw.githubusercontent.com/jelastic-jps/kubernetes/master
description:
  text: /text/description-kube.md
  short: Kubernetes Cluster (Beta)
categories:
  - apps/popular
  - apps/clusters

logo: /images/k8s-logo.png
name: Kubernetes Cluster
targetRegions:
  type: vz7
  
settings:
  fields:
  - type: spinner
    name: worker
    caption: Worker
    min: 1
    max: 10
    default: 2
  - name: stack
    type: radio-fieldset
    values:
      clean: Clean Cluster
      deploy: Deploy Stack YML
    default: clean
    showIf:
      deploy:
        name: yml
        type: string
        caption: Stack YML URL
        default: https://raw.githubusercontent.com/jelastic-jps/kubernetes/master/addons/nginx-pod.yaml
        required: true
        vtype: url

nodes:
- count: 1
  cloudlets: 32
  image: ihorman/kubernetes:working
  nodeGroup: master
  displayName: Master
  extip: false
  env:
    JELASTIC_EXPOSE: false

- count: ${settings.worker}
  nodeGroup: cp
  image: ihorman/kubernetes:working
  displayName: Workers
  cloudlets: 32
  extip: false
  env:
    JELASTIC_EXPOSE: false
  volumes:
  - /var/lib/connect
  volumeMounts:
    /var/lib/connect:
      readOnly: true
      sourcePath: /var/lib/connect
      sourceNodeGroup: master
      
onInstall:
  - init-kubernetes
  - connect-workers
  - install-components
  - install-helm
  - install-traefik
  - generate-admin-token
  
onAfterScaleOut[cp]:
  forEach(event.response.nodes): connect-workers
actions:
  init-kubernetes:
    cmd[master]: |-
      systemctl daemon-reload > /dev/null 2>&1
      service kubelet restart > /dev/null 2>&1
      kubeadm init --config /etc/kubernetes/custom-kubeadm.yaml --ignore-preflight-errors=all
      mkdir -p $HOME/.kube
      cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      chown root:root $HOME/.kube/config
      iptables -I KUBE-FIREWALL -m comment --comment "kubernetes firewall for dropping marked packets" -m mark --mark 0x8000/0x8000 -j  ACCEPT
      service iptables save
      kubeadm token create $(kubeadm token generate) --print-join-command --ttl=0 > /var/lib/connect/settings
      
  connect-workers:
    cmd[cp]: |-
      systemctl daemon-reload > /dev/null 2>&1
      service kubelet restart > /dev/null 2>&1
      $(cat /var/lib/connect/settings) --ignore-preflight-errors=all > /dev/null 2>&1
      sleep 5
      iptables -I KUBE-FIREWALL -m comment --comment "kubernetes firewall for dropping marked packets" -m mark --mark 0x8000/0x8000 -j  ACCEPT
      service iptables save
      
  install-components:
    cmd[master]: |-
      kubectl apply -f ${baseUrl}/addons/kubernetes-dashboard.yaml
      kubectl apply -f ${baseUrl}/addons/heapster.yaml
      kubectl create -f ${baseUrl}/addons/create-admin.yaml
      kubectl apply -f ${baseUrl}/addons/grant-privileges.yaml
    if ('${settings.deploy}':
      cmd[master]: kubectl apply -f ${settings.yml}

  install-helm:
    cmd[master]: |-
      curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash > /dev/null 2>&1
      helm init
      helm update
      kubectl create serviceaccount --namespace kube-system tiller
      kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
      kubectl patch deploy --namespace kube-system tiller-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}'
  
  install-traefik:
     cmd[master]: |-
      kubectl apply -f ${baseUrl}/addons/traefik-rbac.yaml
      kubectl apply -f ${baseUrl}/addons/traefik-ds.yaml
      kubectl apply -f ${baseUrl}/addons/traefik-ui.yaml
      openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=traefik-ui.jelastic"
      kubectl -n kube-system create secret tls traefik-ui-tls-cert --key=tls.key --cert=tls.crt

  generate-admin-token:
    - cmd[master]: kubectl describe svc kubernetes-dashboard -n kube-system  | grep "NodePort:" | grep -o -E "[0-9]*"      
    - setGlobals:
        port: ${response.out}
    - cmd[master]: kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep fulladmin | awk '{print $1}')  | grep 'token:' | sed -e's/token:\| //g'
    - setGlobals:
        token: ${response.out}
        
success: |
   Access Token to [Kubernetes UI](https://node${nodes.master.first.id}-${env.domain}:${globals.port}):
   
   ```${globals.token}```
